@page "/"
@using Opc.Ua;
@using Opc.Ua.Client;
@using Opc.Ua.Configuration;
@using System;


@if (listofchannels != null)
{
    <ul>
        @foreach (var detail in listofchannels)
        {
        <li>@detail</li>
        }
    </ul>
}
@if (subscribevalue != null)
{
    @subscribevalue
    <input type="text" @bind-value="@subscribevalue" />
}
else
{
<h1>Error subscribevalue...</h1>
}
@if (m_subscription != null)
{
    <ul>
        <li>@m_subscription.Id.ToString()</li>
    </ul>

}
else
{
    <h1>Error subscription...</h1>
}

@if (monitoredItem != null)
{
    <ul>
        <li>@monitoredItem.DisplayName</li>
    </ul>
    
}
else
{
    <h1>Error monitoritem...</h1>
}

@code{

    public List<string> listofchannels = new List<string>();
    public List<string> listofdetails = new List<string>();
    private Subscription m_subscription;
    private MonitoredItem monitoredItem;
    // private SubscriptionOutput outputWindow;
    public string subscribevalue { get; set; }
    public Session session;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }
    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Debug.WriteLine("Configuring UA Client");
        var config = new ApplicationConfiguration()
        {
            ApplicationName = "BatchPlantClient",
            ApplicationUri = Utils.Format(@"urn:{0}:BatchPlantClient", System.Net.Dns.GetHostName()),
            ApplicationType = ApplicationType.Client,
            SecurityConfiguration = new SecurityConfiguration
            {
                ApplicationCertificate = new CertificateIdentifier { StoreType = @"Directory", StorePath = @"%CommonApplicationData%\OPC Foundation\CertificateStores\MachineDefault", SubjectName = "BatchPlantClient" },
                TrustedIssuerCertificates = new CertificateTrustList { StoreType = @"Directory", StorePath = @"%CommonApplicationData%\OPC Foundation\CertificateStores\UA Certificate Authorities" },
                TrustedPeerCertificates = new CertificateTrustList { StoreType = @"Directory", StorePath = @"%CommonApplicationData%\OPC Foundation\CertificateStores\UA Applications" },
                RejectedCertificateStore = new CertificateTrustList { StoreType = @"Directory", StorePath = @"%CommonApplicationData%\OPC Foundation\CertificateStores\RejectedCertificates" },
                AutoAcceptUntrustedCertificates = true
            },
            TransportConfigurations = new TransportConfigurationCollection(),
            TransportQuotas = new TransportQuotas { OperationTimeout = 15000 },
            ClientConfiguration = new ClientConfiguration { DefaultSessionTimeout = 60000 },
            TraceConfiguration = new TraceConfiguration()
        };
        config.Validate(ApplicationType.Client).GetAwaiter().GetResult();
        if (config.SecurityConfiguration.AutoAcceptUntrustedCertificates)
        {
            config.CertificateValidator.CertificateValidation += (s, e) => { e.Accept = (e.Error.StatusCode == StatusCodes.BadCertificateUntrusted); };
        }


        var application = new ApplicationInstance
        {
            ApplicationName = "BatchPlantClient",
            ApplicationType = ApplicationType.Client,
            ApplicationConfiguration = config
        };

        application.CheckApplicationInstanceCertificate(false, 2048).GetAwaiter().GetResult();

        var selectedEndpoint = CoreClientUtils.SelectEndpoint("opc.tcp://10.77.0.220:49320", useSecurity: true);


        session = Session
            .Create(config, new ConfiguredEndpoint(null, selectedEndpoint,
            EndpointConfiguration.Create(config)), false, "", 60000, null, null)
            .GetAwaiter()
            .GetResult();

        //System.Diagnostics.Debug.WriteLine("Step 3 - Browse the server namespace.");
        ReferenceDescriptionCollection refs;
        Byte[] cp;
        session.Browse(null, null, ObjectIds.ObjectsFolder, 0u, BrowseDirection.Forward, ReferenceTypeIds.HierarchicalReferences, true, (uint)NodeClass.Variable |
            (uint)NodeClass.Object | (uint)NodeClass.Method, out cp, out refs);
        // Console.WriteLine("DisplayName: BrowseName, NodeClass");
        foreach (var rd in refs)
        {
            //System.Diagnostics.Debug.WriteLine("{0}: {1}, {2}", rd.DisplayName, rd.BrowseName, rd.NodeClass, rd.NodeId);
            listofchannels.Add(rd.DisplayName.ToString());

            ReferenceDescriptionCollection nextRefs;
            byte[] nextCp;
            session.Browse(null, null, ExpandedNodeId.ToNodeId(rd.NodeId, session.NamespaceUris), 0u, BrowseDirection.Forward,
                ReferenceTypeIds.HierarchicalReferences, true, (uint)NodeClass.Variable | (uint)NodeClass.Object | (uint)NodeClass.Method, out nextCp, out nextRefs);



            foreach (var nextRd in nextRefs)
            {
              //  System.Diagnostics.Debug.WriteLine("+ {0}: {1}, {2}", nextRd.DisplayName, nextRd.BrowseName, nextRd.NodeClass, nextRd.NodeId);

                try
                {
                    var _node = ExpandedNodeId.ToNodeId(nextRd.NodeId, session.NamespaceUris);
                    DataValue dv2 = session.ReadValue(_node);
                   // Console.WriteLine("acaaaaaaaaaaaaaaaa "+nextRd.NodeId);
                    listofdetails.Add(dv2.ToString());
                }
                catch(Exception ex)
                {

                }

            }
        }
        /*
        DataValue dv1 = session.ReadValue("ns=2;s=Channel1.halandavo.Tag1");
        listofdetails.Add("acaaaaaaa : "+dv1.ToString());
        */
        if (m_subscription == null)
        {
            m_subscription = new Subscription(session.DefaultSubscription);

            m_subscription.PublishingEnabled = true;
            m_subscription.PublishingInterval = 100;

            session.AddSubscription(m_subscription);
            m_subscription.Create();
        }
        if (monitoredItem == null)
        {
            monitoredItem = new MonitoredItem(m_subscription.DefaultItem);
            monitoredItem.StartNodeId =
            monitoredItem.AttributeId = Attributes.Value;
            monitoredItem.MonitoringMode = MonitoringMode.Reporting;
            monitoredItem.SamplingInterval = 1000;
            monitoredItem.QueueSize = 0;
            monitoredItem.DiscardOldest = true;
            // define event handler for this item, and then add to subscription
            // monitoredItem.Notification += new MonitoredItemNotificationEventHandler(monitoredItem_Notification);
            m_subscription.AddItem(monitoredItem);
            m_subscription.ApplyChanges();

        }

        
    }
    public void monitoredItem_Notification(MonitoredItem monitoredItem, MonitoredItemNotificationEventArgs e)
    {
        /*
        if (this.InvokeRequired)
        {
            this.BeginInvoke(new MonitoredItemNotificationEventHandler(monitoredItem_Notification), monitoredItem, e);
            return;
        }
        */


        MonitoredItemNotification notification = e.NotificationValue as MonitoredItemNotification;
        if (notification == null)
        {
            System.Diagnostics.Debug.WriteLine("notification null");
            return;
        }
        subscribevalue = "value: " + Utils.Format("{0}", notification.Value.WrappedValue.ToString()) +
          ";\nStatusCode: " + Utils.Format("{0}", notification.Value.StatusCode.ToString()) +
          ";\nSource timestamp: " + notification.Value.SourceTimestamp.ToString() +
          ";\nServer timestamp: " + notification.Value.ServerTimestamp.ToString();
    }

}